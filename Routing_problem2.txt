Title: Routing Problem using Dijkstra's Algorithm

Description:
This program solves a routing problem by finding the shortest path between nodes in a directed, weighted graph using Dijkstra's algorithm.

Functions:
1. void dijkstra(int start, vector<vector<pair<int, int>>> &graph, vector<int> &dist, vector<int> &prev)
   - start: the starting node (integer)
   - graph: adjacency list representing the graph (vector of vector of pairs)
   - dist: vector to store the shortest path distances (output)
   - prev: vector to store the previous nodes in the shortest paths (output)

   This function calculates the shortest path distances from the starting node to all other nodes in the graph using Dijkstra's algorithm.

2. vector<int> reconstruct_path(int start, int end, const vector<int> &prev)
   - start: the starting node (integer)
   - end: the ending node (integer)
   - prev: vector containing the previous nodes in the shortest paths

   This function reconstructs the shortest path from the starting node to the ending node using the information stored in the prev vector.

Input:
The graph is represented as an adjacency list (vector of vector of pairs) and is hard-coded in the main function.
Format: {{destination, weight}, ...}

Output:
For each node in the graph, the shortest path distance and the path from the starting node are printed.

Example:
The provided graph is as follows:
0: (1, 5), (2, 1)
1: (2, 2), (3, 3)
2: (1, 1), (3, 4)
3: (4, 6)
4: (empty)

Output:
Shortest distance from 0 to 0: 0
Shortest distance from 0 to 1: 2
Path: 0 -> 2 -> 1
Shortest distance from 0 to 2: 1
Path: 0 -> 2
Shortest distance from 0 to 3: 5
Path: 0 -> 2 -> 1 -> 3
Shortest distance from 0 to 4: 11
Path: 0 -> 2 -> 1 -> 3 -> 4

Usage:
1. Compile the program.
2. Run the program.
3. The shortest path distances and paths from the starting node to all other nodes are displayed.
